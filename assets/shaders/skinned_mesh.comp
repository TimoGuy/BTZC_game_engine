#version 460

layout (local_size_x = 256) in;

struct Vertex {
    // vec3 position;
    // vec3 normal;
    // vec2 tex_coord;
    // ^^               The above               ^^
    // vv But recomp'd to pack data into std430 vv
    vec4 position_xyz_normal_x;
    vec4 normal_yz_tex_coord_xy;
};

layout(binding = 0, std430) readonly buffer Input_vertex_buffer {
    Vertex input_vertices[];
};

struct Vertex_skin_data {
    uvec4 joint_mat_idxs;
    vec4  weights;
};

layout(binding = 1, std430) readonly buffer Input_vertex_skin_data_ssbo {
    Vertex_skin_data input_vertex_skin_datas[];
};

#define MAX_NUM_JOINTS 128
struct Mesh_joint_deform_data {
    mat4 joint_transform[MAX_NUM_JOINTS];
};

layout(binding = 2, std430) readonly buffer Mesh_joint_deform_data_ssbo {
    Mesh_joint_deform_data mesh_joint_deform_data;
};


layout(binding = 3, std430) writeonly buffer Output_vertex_buffer {
    Vertex output_vertices[];
};

uniform uint num_vertices;


void main()
{
    uint g_id = gl_GlobalInvocationID.x;
    if (g_id < num_vertices)
    {
        vec3 input_pos       = input_vertices[g_id].position_xyz_normal_x.xyz;
        vec3 input_norm      = vec3(input_vertices[g_id].position_xyz_normal_x.w,
                                    input_vertices[g_id].normal_yz_tex_coord_xy.xy);
        vec2 input_tex_coord = input_vertices[g_id].normal_yz_tex_coord_xy.zw;
        uvec4 joint          = input_vertex_skin_datas[g_id].joint_mat_idxs;
        vec4 weight          = input_vertex_skin_datas[g_id].weights;

        // Compute deformed mesh.
        mat4 deform_transform =
            (mesh_joint_deform_data.joint_transform[joint.x] * weight.x
             + mesh_joint_deform_data.joint_transform[joint.y] * weight.y
             + mesh_joint_deform_data.joint_transform[joint.z] * weight.z
             + mesh_joint_deform_data.joint_transform[joint.w] * weight.w);

        vec3 output_position = vec3(deform_transform * vec4(input_pos, 1.0));
        vec3 output_normal   = normalize(transpose(inverse(mat3(deform_transform))) * input_norm);

        // Spit out the data!
        output_vertices[g_id].position_xyz_normal_x  = vec4(output_position.xyz, output_normal.x);
        output_vertices[g_id].normal_yz_tex_coord_xy = vec4(output_normal.yz, input_tex_coord.xy);
    }
}
